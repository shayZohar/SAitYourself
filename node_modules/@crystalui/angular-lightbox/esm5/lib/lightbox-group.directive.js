/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, ContentChildren, QueryList } from '@angular/core';
import { EventService } from './event.service';
import { LightboxDirective } from './lightbox.directive';
import { CrystalLightbox } from './lightbox.service';
var LightboxGroupDirective = /** @class */ (function () {
    function LightboxGroupDirective(eventService, lightbox) {
        var _this = this;
        this.eventService = eventService;
        this.lightbox = lightbox;
        this.thumbnailImages = [];
        this.images = [];
        this.properties = {};
        this.hostLightboxGroup = true;
        this.globalEventsSubscription = this.eventService.emitter.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.handleGlobalEvents(event);
        }));
    }
    Object.defineProperty(LightboxGroupDirective.prototype, "lightboxDirectiveList", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._lightboxDirectiveList) {
                return this._lightboxDirectiveList.toArray();
            }
            else {
                return [];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    LightboxGroupDirective.prototype.handleGlobalEvents = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.type === 'thumbnail:click') {
            this.thumbnailImageElement = event.elementRef.nativeElement;
            this.thumbnailImages = this.getThumbnailImages();
            this.thumbnailImageIndex = this.getThumbnailImageIndex(this.thumbnailImageElement);
            if (this.thumbnailImageIndex == undefined) {
                return;
            }
            this.thumbnailLightboxDirective = this.getThumbnailLightboxDirective(this.thumbnailImageIndex);
            this.images = this.getImages();
            this.properties = event.properties;
            this.properties.index = this.thumbnailImageIndex;
            this.lightbox.open({
                images: this.images,
                //index: this.thumbnailImageIndex,
                properties: this.properties
            });
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    LightboxGroupDirective.prototype.getThumbnailImageIndex = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var images = this.thumbnailImages;
        for (var i = 0; i < images.length; i++) {
            if (element === images[i]) {
                return i;
            }
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    LightboxGroupDirective.prototype.getThumbnailLightboxDirective = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.lightboxDirectiveList[index];
    };
    /**
     * @return {?}
     */
    LightboxGroupDirective.prototype.getThumbnailImages = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var thumbnailImages = [];
        this.lightboxDirectiveList.forEach((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            thumbnailImages.push(el['elementRef'].nativeElement);
        }));
        return thumbnailImages;
    };
    /**
     * @return {?}
     */
    LightboxGroupDirective.prototype.getImages = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var images = [];
        this.lightboxDirectiveList.forEach((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            /** @type {?} */
            var image = {};
            /** @type {?} */
            var nativeElement = el['elementRef'].nativeElement;
            if (el.fullImage) {
                image.fullImage = el.fullImage;
            }
            image.thumbnailImage = {
                path: nativeElement.src,
                height: nativeElement.naturalHeight,
                width: nativeElement.naturalWidth
            };
            image.nativeElement = nativeElement;
            images.push(image);
        }));
        return images;
    };
    LightboxGroupDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lightbox-group]'
                },] }
    ];
    /** @nocollapse */
    LightboxGroupDirective.ctorParameters = function () { return [
        { type: EventService },
        { type: CrystalLightbox }
    ]; };
    LightboxGroupDirective.propDecorators = {
        hostLightboxGroup: [{ type: HostBinding, args: ['class.lightbox-group',] }],
        _lightboxDirectiveList: [{ type: ContentChildren, args: [LightboxDirective, { descendants: true },] }]
    };
    return LightboxGroupDirective;
}());
export { LightboxGroupDirective };
if (false) {
    /** @type {?} */
    LightboxGroupDirective.prototype.thumbnailImageElement;
    /** @type {?} */
    LightboxGroupDirective.prototype.thumbnailLightboxDirective;
    /** @type {?} */
    LightboxGroupDirective.prototype.thumbnailImageIndex;
    /** @type {?} */
    LightboxGroupDirective.prototype.thumbnailImages;
    /** @type {?} */
    LightboxGroupDirective.prototype.images;
    /** @type {?} */
    LightboxGroupDirective.prototype.properties;
    /** @type {?} */
    LightboxGroupDirective.prototype.globalEventsSubscription;
    /** @type {?} */
    LightboxGroupDirective.prototype.hostLightboxGroup;
    /** @type {?} */
    LightboxGroupDirective.prototype._lightboxDirectiveList;
    /**
     * @type {?}
     * @private
     */
    LightboxGroupDirective.prototype.eventService;
    /**
     * @type {?}
     * @private
     */
    LightboxGroupDirective.prototype.lightbox;
}
//# sourceMappingURL=data:application/json;base64,