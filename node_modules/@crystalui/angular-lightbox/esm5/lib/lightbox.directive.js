/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Output, HostListener, HostBinding, EventEmitter } from '@angular/core';
import { EventService } from './event.service';
import { CrystalLightbox } from './lightbox.service';
var LightboxDirective = /** @class */ (function () {
    function LightboxDirective(lightbox, eventService, elementRef) {
        var _this = this;
        this.lightbox = lightbox;
        this.eventService = eventService;
        this.elementRef = elementRef;
        this.properties = {};
        this.events = new EventEmitter();
        this.hostLightboxGroup = true;
        this.globalEventsSubscription = this.eventService.emitter.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.handleGlobalEvents(event);
        }));
    }
    Object.defineProperty(LightboxDirective.prototype, "hostSimpleMode", {
        get: /**
         * @return {?}
         */
        function () {
            return this.simpleMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LightboxDirective.prototype, "isGroupImage", {
        get: /**
         * @return {?}
         */
        function () {
            return this.elementRef.nativeElement.closest(".lightbox-group");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    LightboxDirective.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.disable) {
            return;
        }
        if (this.isGroupImage) {
            this.eventService.emitChangeEvent({
                type: 'thumbnail:click',
                elementRef: this.elementRef,
                properties: this.properties
            });
        }
        else {
            this.image = this.getImage();
            this.lightbox.open({
                images: [this.image],
                properties: this.properties,
                index: 0
            });
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LightboxDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.properties = this.getProperties(changes);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    LightboxDirective.prototype.handleGlobalEvents = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.events.emit(event);
    };
    /**
     * @return {?}
     */
    LightboxDirective.prototype.getImage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var image = {};
        /** @type {?} */
        var nativeElement = this.elementRef.nativeElement;
        if (this.fullImage) {
            image.fullImage = this.fullImage;
        }
        image.thumbnailImage = {
            path: nativeElement.src,
            height: nativeElement.naturalHeight,
            width: nativeElement.naturalWidth
        };
        image.nativeElement = nativeElement;
        return image;
    };
    ;
    /**
     * @param {?} changes
     * @return {?}
     */
    LightboxDirective.prototype.getProperties = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var properties = {};
        for (var prop in changes) {
            if (prop !== 'fullImage') {
                properties[prop] = changes[prop].currentValue;
            }
        }
        return properties;
    };
    LightboxDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lightbox]'
                },] }
    ];
    /** @nocollapse */
    LightboxDirective.ctorParameters = function () { return [
        { type: CrystalLightbox },
        { type: EventService },
        { type: ElementRef }
    ]; };
    LightboxDirective.propDecorators = {
        fullImage: [{ type: Input }],
        properties: [{ type: Input }],
        loop: [{ type: Input }],
        backgroundOpacity: [{ type: Input }],
        counter: [{ type: Input }],
        imageMaxHeight: [{ type: Input }],
        imageMaxWidth: [{ type: Input }],
        animationDuration: [{ type: Input }],
        animationMode: [{ type: Input }],
        animationTimingFunction: [{ type: Input }],
        closeButtonText: [{ type: Input }],
        counterSeparator: [{ type: Input }],
        disable: [{ type: Input }],
        simpleMode: [{ type: Input }],
        backgroundColor: [{ type: Input }],
        hideThumbnail: [{ type: Input }],
        gestureEnable: [{ type: Input }],
        events: [{ type: Output }],
        hostLightboxGroup: [{ type: HostBinding, args: ['class.lightbox-single',] }],
        hostSimpleMode: [{ type: HostBinding, args: ['class.lightbox-simple-mode',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return LightboxDirective;
}());
export { LightboxDirective };
if (false) {
    /** @type {?} */
    LightboxDirective.prototype.globalEventsSubscription;
    /** @type {?} */
    LightboxDirective.prototype.image;
    /** @type {?} */
    LightboxDirective.prototype.fullImage;
    /** @type {?} */
    LightboxDirective.prototype.properties;
    /** @type {?} */
    LightboxDirective.prototype.loop;
    /** @type {?} */
    LightboxDirective.prototype.backgroundOpacity;
    /** @type {?} */
    LightboxDirective.prototype.counter;
    /** @type {?} */
    LightboxDirective.prototype.imageMaxHeight;
    /** @type {?} */
    LightboxDirective.prototype.imageMaxWidth;
    /** @type {?} */
    LightboxDirective.prototype.animationDuration;
    /** @type {?} */
    LightboxDirective.prototype.animationMode;
    /** @type {?} */
    LightboxDirective.prototype.animationTimingFunction;
    /** @type {?} */
    LightboxDirective.prototype.closeButtonText;
    /** @type {?} */
    LightboxDirective.prototype.counterSeparator;
    /** @type {?} */
    LightboxDirective.prototype.disable;
    /** @type {?} */
    LightboxDirective.prototype.simpleMode;
    /** @type {?} */
    LightboxDirective.prototype.backgroundColor;
    /** @type {?} */
    LightboxDirective.prototype.hideThumbnail;
    /** @type {?} */
    LightboxDirective.prototype.gestureEnable;
    /** @type {?} */
    LightboxDirective.prototype.events;
    /** @type {?} */
    LightboxDirective.prototype.hostLightboxGroup;
    /**
     * @type {?}
     * @private
     */
    LightboxDirective.prototype.lightbox;
    /**
     * @type {?}
     * @private
     */
    LightboxDirective.prototype.eventService;
    /**
     * @type {?}
     * @private
     */
    LightboxDirective.prototype.elementRef;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,