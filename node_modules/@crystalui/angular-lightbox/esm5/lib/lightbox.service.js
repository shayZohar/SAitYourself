/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { LightboxComponent } from './lightbox.component';
import { DefaultProperties } from './default-properties';
/**
 * @record
 */
export function AdComponent() { }
if (false) {
    /** @type {?} */
    AdComponent.prototype.lightboxData;
    /** @type {?} */
    AdComponent.prototype.events;
}
var CrystalLightbox = /** @class */ (function () {
    function CrystalLightbox(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
    }
    /**
     * @param {?} component
     * @param {?} lightboxData
     * @return {?}
     */
    CrystalLightbox.prototype.appendComponentToBody = /**
     * @param {?} component
     * @param {?} lightboxData
     * @return {?}
     */
    function (component, lightboxData) {
        var _this = this;
        /** @type {?} */
        var componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        ((/** @type {?} */ (componentRef.instance))).lightboxData = lightboxData;
        this.appRef.attachView(componentRef.hostView);
        /** @type {?} */
        var domElem = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));
        // Add to body
        document.body.appendChild(domElem);
        ((/** @type {?} */ (componentRef.instance))).events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.type === 'close') {
                _this.appRef.detachView(componentRef.hostView);
                componentRef.destroy();
            }
        }));
    };
    /**
     * @param {?} lightboxData
     * @return {?}
     */
    CrystalLightbox.prototype.open = /**
     * @param {?} lightboxData
     * @return {?}
     */
    function (lightboxData) {
        lightboxData.properties = this.applyPropertieDefaults(DefaultProperties, lightboxData.properties);
        /** @type {?} */
        var component = this.getLightboxComponent();
        this.appendComponentToBody(component, lightboxData);
    };
    /**
     * @return {?}
     */
    CrystalLightbox.prototype.getLightboxComponent = /**
     * @return {?}
     */
    function () {
        return LightboxComponent;
    };
    /**
     * @param {?} defaultProperties
     * @param {?} properties
     * @return {?}
     */
    CrystalLightbox.prototype.applyPropertieDefaults = /**
     * @param {?} defaultProperties
     * @param {?} properties
     * @return {?}
     */
    function (defaultProperties, properties) {
        if (!properties) {
            properties = {};
        }
        if (!properties.index) {
            properties.index = 0;
        }
        this._defaultProperties = Object.assign({}, defaultProperties);
        return Object.assign(this._defaultProperties, properties);
    };
    CrystalLightbox.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CrystalLightbox.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    return CrystalLightbox;
}());
export { CrystalLightbox };
if (false) {
    /** @type {?} */
    CrystalLightbox.prototype.isMobile;
    /** @type {?} */
    CrystalLightbox.prototype._defaultProperties;
    /**
     * @type {?}
     * @private
     */
    CrystalLightbox.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    CrystalLightbox.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    CrystalLightbox.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHRib3guc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjcnlzdGFsdWkvYW5ndWxhci1saWdodGJveC8iLCJzb3VyY2VzIjpbImxpYi9saWdodGJveC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBbUIsY0FBYyxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUM5SCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQUV6RCxpQ0FHQzs7O0lBRkEsbUNBQTJCOztJQUMzQiw2QkFBWTs7QUFHYjtJQUtDLHlCQUNTLHdCQUFrRCxFQUNsRCxNQUFzQixFQUN0QixRQUFrQjtRQUZsQiw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQ2xELFdBQU0sR0FBTixNQUFNLENBQWdCO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDM0IsQ0FBQzs7Ozs7O0lBRUQsK0NBQXFCOzs7OztJQUFyQixVQUFzQixTQUFjLEVBQUUsWUFBMEI7UUFBaEUsaUJBbUJDOztZQWxCWSxZQUFZLEdBQUcsSUFBSSxDQUFDLHdCQUF3QjthQUM3Qyx1QkFBdUIsQ0FBQyxTQUFTLENBQUM7YUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFaEMsQ0FBQyxtQkFBYSxZQUFZLENBQUMsUUFBUSxFQUFBLENBQUMsQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRWpFLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQzs7WUFDeEMsT0FBTyxHQUFHLG1CQUFBLENBQUMsbUJBQUEsWUFBWSxDQUFDLFFBQVEsRUFBd0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBZTtRQUUzRixjQUFjO1FBQ2QsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0IsQ0FBQyxtQkFBYSxZQUFZLENBQUMsUUFBUSxFQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsS0FBSztZQUMzRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFDO2dCQUNoQyxLQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzlDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUN2QjtRQUNJLENBQUMsRUFBQyxDQUFDO0lBQ1YsQ0FBQzs7Ozs7SUFHRCw4QkFBSTs7OztJQUFKLFVBQUssWUFBMEI7UUFDOUIsWUFBWSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztZQUN4RixTQUFTLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1FBQ2pELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDckQsQ0FBQzs7OztJQUVELDhDQUFvQjs7O0lBQXBCO1FBQ0MsT0FBTyxpQkFBaUIsQ0FBQztJQUMxQixDQUFDOzs7Ozs7SUFFRCxnREFBc0I7Ozs7O0lBQXRCLFVBQXVCLGlCQUFpQixFQUFFLFVBQVU7UUFDbkQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNoQixVQUFVLEdBQUcsRUFBRSxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUM7WUFDckIsVUFBVSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDckI7UUFDRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUMvRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzNELENBQUM7O2dCQXJERCxVQUFVOzs7O2dCQVZvQix3QkFBd0I7Z0JBQW1CLGNBQWM7Z0JBQW5FLFFBQVE7O0lBZ0U3QixzQkFBQztDQUFBLEFBdERELElBc0RDO1NBckRZLGVBQWU7OztJQUMzQixtQ0FBa0I7O0lBQ2xCLDZDQUErQjs7Ozs7SUFHOUIsbURBQTBEOzs7OztJQUMxRCxpQ0FBOEI7Ozs7O0lBQzlCLG1DQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEVtYmVkZGVkVmlld1JlZiwgQXBwbGljYXRpb25SZWYsIENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGlnaHRib3hDb21wb25lbnQgfSBmcm9tICcuL2xpZ2h0Ym94LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzLCBMaWdodGJveERhdGEgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgRGVmYXVsdFByb3BlcnRpZXMgfSBmcm9tICcuL2RlZmF1bHQtcHJvcGVydGllcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRDb21wb25lbnQge1xuXHRsaWdodGJveERhdGE6IExpZ2h0Ym94RGF0YTsgXG5cdGV2ZW50czogYW55O1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ3J5c3RhbExpZ2h0Ym94IHtcblx0aXNNb2JpbGU6IGJvb2xlYW47XG5cdF9kZWZhdWx0UHJvcGVydGllczogUHJvcGVydGllcztcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuXHRcdHByaXZhdGUgYXBwUmVmOiBBcHBsaWNhdGlvblJlZixcblx0XHRwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcil7IFxuXHR9XG4gXG5cdGFwcGVuZENvbXBvbmVudFRvQm9keShjb21wb25lbnQ6IGFueSwgbGlnaHRib3hEYXRhOiBMaWdodGJveERhdGEpIHtcdFx0XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyXG4gICAgICAgICAgICAucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50KVxuICAgICAgICAgICAgLmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcblxuXHRcdCg8QWRDb21wb25lbnQ+Y29tcG9uZW50UmVmLmluc3RhbmNlKS5saWdodGJveERhdGEgPSBsaWdodGJveERhdGE7XG5cblx0XHR0aGlzLmFwcFJlZi5hdHRhY2hWaWV3KGNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XG5cdFx0Y29uc3QgZG9tRWxlbSA9IChjb21wb25lbnRSZWYuaG9zdFZpZXcgYXMgRW1iZWRkZWRWaWV3UmVmPGFueT4pLnJvb3ROb2Rlc1swXSBhcyBIVE1MRWxlbWVudDtcblxuXHRcdC8vIEFkZCB0byBib2R5XG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb21FbGVtKTtcblx0XHRcbiAgICAgICAgKDxBZENvbXBvbmVudD5jb21wb25lbnRSZWYuaW5zdGFuY2UpLmV2ZW50cy5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgIFx0aWYgKGV2ZW50LnR5cGUgPT09ICdjbG9zZScpe1xuXHRcdFx0XHR0aGlzLmFwcFJlZi5kZXRhY2hWaWV3KGNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XG5cdFx0XHRcdGNvbXBvbmVudFJlZi5kZXN0cm95KCk7XG5cdFx0XHR9XG4gICAgICAgIH0pO1xuXHR9XG5cblxuXHRvcGVuKGxpZ2h0Ym94RGF0YTogTGlnaHRib3hEYXRhKXtcblx0XHRsaWdodGJveERhdGEucHJvcGVydGllcyA9IHRoaXMuYXBwbHlQcm9wZXJ0aWVEZWZhdWx0cyhEZWZhdWx0UHJvcGVydGllcywgbGlnaHRib3hEYXRhLnByb3BlcnRpZXMpO1xuICAgICAgICBsZXQgY29tcG9uZW50ID0gdGhpcy5nZXRMaWdodGJveENvbXBvbmVudCgpO1xuXHRcdHRoaXMuYXBwZW5kQ29tcG9uZW50VG9Cb2R5KGNvbXBvbmVudCwgbGlnaHRib3hEYXRhKTtcblx0fVxuXG5cdGdldExpZ2h0Ym94Q29tcG9uZW50KCl7XG5cdFx0cmV0dXJuIExpZ2h0Ym94Q29tcG9uZW50O1xuXHR9XG5cblx0YXBwbHlQcm9wZXJ0aWVEZWZhdWx0cyhkZWZhdWx0UHJvcGVydGllcywgcHJvcGVydGllcyl7XG5cdFx0aWYgKCFwcm9wZXJ0aWVzKSB7XG5cdFx0XHRwcm9wZXJ0aWVzID0ge307XG5cdFx0fVxuXG5cdFx0aWYgKCFwcm9wZXJ0aWVzLmluZGV4KXsgXG5cdFx0XHRwcm9wZXJ0aWVzLmluZGV4ID0gMDtcblx0XHR9XG5cdFx0dGhpcy5fZGVmYXVsdFByb3BlcnRpZXMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0UHJvcGVydGllcyk7XG5cdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24odGhpcy5fZGVmYXVsdFByb3BlcnRpZXMsIHByb3BlcnRpZXMpO1xuXHR9XG59Il19