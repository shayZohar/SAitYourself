/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, ViewChild, ElementRef } from '@angular/core';
import { EventService } from './event.service';
import { Utils } from './utils';
export class LightboxCommonComponent {
    /**
     * @param {?} eventService
     */
    constructor(eventService) {
        this.eventService = eventService;
        this.currentImageIndex = 0;
        this.indexCurrentSlide = 1;
        this.containerStyles = {
            transition: '',
            transform: '',
            width: '',
            height: '',
            opacity: ''
        };
        this.currImageLoadingState = 'not-loaded';
        this.isMobile = Utils.mobileCheck();
    }
    /**
     * @return {?}
     */
    get lightboxImage() {
        return this._lightboxImage;
    }
    /**
     * @return {?}
     */
    get lightboxImageElement() {
        if (this.lightboxImage) {
            return this.lightboxImage.nativeElement;
        }
    }
    /**
     * @return {?}
     */
    get lightboxImageNaturalHeight() {
        if (this.lightboxImageElement) {
            return this.lightboxImageElement.naturalHeight;
        }
    }
    /**
     * @return {?}
     */
    get lightboxImageNaturalWidth() {
        if (this.lightboxImageElement) {
            return this.lightboxImageElement.naturalWidth;
        }
    }
    /**
     * @return {?}
     */
    get index() {
        return this.currentImageIndex;
    }
    /**
     * @return {?}
     */
    get properties() {
        return this.lightboxData.properties;
    }
    /**
     * @return {?}
     */
    get images() {
        return this.lightboxData.images || [this.lightboxData.image];
    }
    /**
     * @return {?}
     */
    get thumbnailImage() {
        return this.images[this.currentImageIndex].nativeElement;
    }
    /**
     * @return {?}
     */
    get thumbnailImagePosition() {
        return this.thumbnailImage.getBoundingClientRect();
    }
    // Image size if it is larger than the window size
    /**
     * @return {?}
     */
    get virtualImageDimension() {
        /** @type {?} */
        let height = this.lightboxImageNaturalHeight;
        /** @type {?} */
        let width = height * this.imageAspectRatio;
        /** @type {?} */
        const windowWidth = document.body.clientWidth;
        /** @type {?} */
        const windowHeight = window.innerHeight;
        if (this.isImageLargerWindow) {
            if (height > windowHeight) {
                height = windowHeight;
                width = height * this.imageAspectRatio;
            }
            if (width > windowWidth) {
                width = windowWidth;
                height = width / this.imageAspectRatio;
            }
        }
        else {
            width = this.lightboxImageNaturalWidth;
            height = this.lightboxImageNaturalHeight;
        }
        if (width === 0 || Number.parseInt(height) === 0) {
            return { width: 200, height: 200 };
        }
        return { width, height };
    }
    /**
     * @return {?}
     */
    get containerInitialPosition() {
        /** @type {?} */
        const scale = (this.showState === 'initial-thumbnail-image') ? 1 : this.containerScale;
        /** @type {?} */
        const top = this.thumbnailImagePosition.top;
        /** @type {?} */
        const left = this.thumbnailImagePosition.left;
        return 'matrix(' + scale + ', 0, 0, ' + scale + ',' + left + ',' + top + ')';
    }
    /**
     * @return {?}
     */
    get containerFullscreenPosition() {
        /** @type {?} */
        const left = (document.body.clientWidth - this.virtualImageDimension.width) / 2;
        /** @type {?} */
        const top = (window.innerHeight - this.virtualImageDimension.height) / 2;
        return 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    }
    /**
     * @return {?}
     */
    get containerScale() {
        return this.thumbnailImagePosition.width / this.virtualImageDimension.width;
    }
    /**
     * @return {?}
     */
    get imageAspectRatio() {
        return this.thumbnailImage.naturalWidth / this.thumbnailImage.naturalHeight;
    }
    /**
     * @return {?}
     */
    get isImageLargerWindow() {
        /** @type {?} */
        const imageNaturalWidth = this.lightboxImageNaturalWidth;
        /** @type {?} */
        const imageNaturalHeight = this.lightboxImageNaturalHeight;
        /** @type {?} */
        const windowWidth = document.body.clientWidth;
        /** @type {?} */
        const windowHeight = window.innerHeight;
        return imageNaturalWidth > windowWidth || imageNaturalHeight > windowHeight;
    }
    /**
     * @return {?}
     */
    get isFirstImage() {
        if (this.properties.loop) {
            return false;
        }
        else {
            return this.index === 0;
        }
    }
    /**
     * @return {?}
     */
    get isLastImage() {
        if (this.properties.loop) {
            return false;
        }
        else {
            return this.index === this.latestImageIndex;
        }
    }
    /**
     * @return {?}
     */
    get latestImageIndex() {
        return this.images.length - 1;
    }
    /**
     * @return {?}
     */
    get backgroundColor() {
        /** @type {?} */
        const opacity = this.properties.backgroundOpacity;
        /** @type {?} */
        const color = this.properties.backgroundColor;
        if (color === 'black') {
            return 'rgba(0, 0, 0, ' + opacity + ')';
        }
        else {
            return 'rgba(255, 255, 255, ' + opacity + ')';
        }
    }
    /**
     * @return {?}
     */
    get animationDuration() {
        /** @type {?} */
        const animationDuration = this.properties.animationDuration;
        if (typeof animationDuration === "string") {
            return Number.parseInt(animationDuration);
        }
        else {
            return animationDuration;
        }
    }
    /**
     * @return {?}
     */
    get animationMode() {
        if (this.currImageLoadingState === 'error') {
            return 'default';
        }
        return this.properties.animationMode;
    }
    /**
     * @return {?}
     */
    get animationTimingFunction() {
        return this.properties.animationTimingFunction;
    }
    /**
     * @return {?}
     */
    get closeButtonText() {
        return this.properties.closeButtonText;
    }
    /**
     * @return {?}
     */
    get counterSeparator() {
        return this.properties.counterSeparator;
    }
    /**
     * @return {?}
     */
    get counter() {
        return this.currentImageIndex + 1 + this.counterSeparator + this.images.length;
    }
    /**
     * @param {?} type
     * @param {?} state
     * @return {?}
     */
    emitState(type, state) {
        if (state === 'initial-virtual-image' ||
            state === 'initial-styles') {
            return;
        }
        if (state === 'initial-default' ||
            state === 'initial-thumbnail-image') {
            state = 'initial';
        }
        this.eventService.emitChangeEvent({
            type: type + ':' + state
        });
    }
    /**
     * @param {?} state
     * @return {?}
     */
    setShowState(state) {
        this.showState = state;
        this.emitState('show-state', state);
    }
    /**
     * @param {?} state
     * @return {?}
     */
    setClosingState(state) {
        this.closingState = state;
        this.emitState('closing-state', state);
    }
    /**
     * @return {?}
     */
    setAnimationDuration() {
        this.hostStyleTransition = 'background-color ' + this.animationDuration + 'ms';
        this.containerStyles.transition = 'all ' + this.animationDuration + 'ms ' + this.animationTimingFunction;
    }
    /**
     * @return {?}
     */
    setBackgroundColor() {
        this.hostStyleBackgroundColor = this.backgroundColor;
    }
    /**
     * @return {?}
     */
    getContainerHeight() {
        return this.thumbnailImagePosition.height / this.containerScale + 'px';
    }
    /**
     * @return {?}
     */
    showThumbnailImage() {
        this.thumbnailImage.style.opacity = '';
    }
    /**
     * @return {?}
     */
    hideThumbnailImage() {
        this.thumbnailImage.style.opacity = 0;
    }
    /**
     * @return {?}
     */
    updateThumbnailPosition() {
        this.containerStyles.transform = this.containerInitialPosition;
    }
}
LightboxCommonComponent.decorators = [
    { type: Component, args: [{
                selector: 'lightbox-common',
                template: ''
            }] }
];
/** @nocollapse */
LightboxCommonComponent.ctorParameters = () => [
    { type: EventService }
];
LightboxCommonComponent.propDecorators = {
    lightboxData: [{ type: Input }],
    hostStyleBackgroundColor: [{ type: HostBinding, args: ['style.backgroundColor',] }],
    hostStyleTransition: [{ type: HostBinding, args: ['style.transition',] }],
    _imageFirst: [{ type: ViewChild, args: ['imageFirst',] }],
    _imageSecond: [{ type: ViewChild, args: ['imageSecond',] }],
    _imageLast: [{ type: ViewChild, args: ['imageLast',] }],
    _lightboxImage: [{ type: ViewChild, args: ['lightboxImage',] }]
};
if (false) {
    /** @type {?} */
    LightboxCommonComponent.prototype.currentImageIndex;
    /** @type {?} */
    LightboxCommonComponent.prototype.indexCurrentSlide;
    /** @type {?} */
    LightboxCommonComponent.prototype.showState;
    /** @type {?} */
    LightboxCommonComponent.prototype.closingState;
    /** @type {?} */
    LightboxCommonComponent.prototype.containerStyles;
    /** @type {?} */
    LightboxCommonComponent.prototype.currImageLoadingState;
    /** @type {?} */
    LightboxCommonComponent.prototype.isMobile;
    /** @type {?} */
    LightboxCommonComponent.prototype.lightboxData;
    /** @type {?} */
    LightboxCommonComponent.prototype.hostStyleBackgroundColor;
    /** @type {?} */
    LightboxCommonComponent.prototype.hostStyleTransition;
    /** @type {?} */
    LightboxCommonComponent.prototype._imageFirst;
    /** @type {?} */
    LightboxCommonComponent.prototype._imageSecond;
    /** @type {?} */
    LightboxCommonComponent.prototype._imageLast;
    /** @type {?} */
    LightboxCommonComponent.prototype._lightboxImage;
    /** @type {?} */
    LightboxCommonComponent.prototype.eventService;
}
//# sourceMappingURL=data:application/json;base64,