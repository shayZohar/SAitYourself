/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostBinding, ContentChildren, QueryList } from '@angular/core';
import { EventService } from './event.service';
import { LightboxDirective } from './lightbox.directive';
import { CrystalLightbox } from './lightbox.service';
export class LightboxGroupDirective {
    /**
     * @param {?} eventService
     * @param {?} lightbox
     */
    constructor(eventService, lightbox) {
        this.eventService = eventService;
        this.lightbox = lightbox;
        this.thumbnailImages = [];
        this.images = [];
        this.properties = {};
        this.hostLightboxGroup = true;
        this.globalEventsSubscription = this.eventService.emitter.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.handleGlobalEvents(event);
        }));
    }
    /**
     * @return {?}
     */
    get lightboxDirectiveList() {
        if (this._lightboxDirectiveList) {
            return this._lightboxDirectiveList.toArray();
        }
        else {
            return [];
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleGlobalEvents(event) {
        if (event.type === 'thumbnail:click') {
            this.thumbnailImageElement = event.elementRef.nativeElement;
            this.thumbnailImages = this.getThumbnailImages();
            this.thumbnailImageIndex = this.getThumbnailImageIndex(this.thumbnailImageElement);
            if (this.thumbnailImageIndex == undefined) {
                return;
            }
            this.thumbnailLightboxDirective = this.getThumbnailLightboxDirective(this.thumbnailImageIndex);
            this.images = this.getImages();
            this.properties = event.properties;
            this.properties.index = this.thumbnailImageIndex;
            this.lightbox.open({
                images: this.images,
                //index: this.thumbnailImageIndex,
                properties: this.properties
            });
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    getThumbnailImageIndex(element) {
        /** @type {?} */
        const images = this.thumbnailImages;
        for (var i = 0; i < images.length; i++) {
            if (element === images[i]) {
                return i;
            }
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getThumbnailLightboxDirective(index) {
        return this.lightboxDirectiveList[index];
    }
    /**
     * @return {?}
     */
    getThumbnailImages() {
        /** @type {?} */
        let thumbnailImages = [];
        this.lightboxDirectiveList.forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            thumbnailImages.push(el['elementRef'].nativeElement);
        }));
        return thumbnailImages;
    }
    /**
     * @return {?}
     */
    getImages() {
        /** @type {?} */
        let images = [];
        this.lightboxDirectiveList.forEach((/**
         * @param {?} el
         * @return {?}
         */
        el => {
            /** @type {?} */
            let image = {};
            /** @type {?} */
            const nativeElement = el['elementRef'].nativeElement;
            if (el.fullImage) {
                image.fullImage = el.fullImage;
            }
            image.thumbnailImage = {
                path: nativeElement.src,
                height: nativeElement.naturalHeight,
                width: nativeElement.naturalWidth
            };
            image.nativeElement = nativeElement;
            images.push(image);
        }));
        return images;
    }
}
LightboxGroupDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lightbox-group]'
            },] }
];
/** @nocollapse */
LightboxGroupDirective.ctorParameters = () => [
    { type: EventService },
    { type: CrystalLightbox }
];
LightboxGroupDirective.propDecorators = {
    hostLightboxGroup: [{ type: HostBinding, args: ['class.lightbox-group',] }],
    _lightboxDirectiveList: [{ type: ContentChildren, args: [LightboxDirective, { descendants: true },] }]
};
if (false) {
    /** @type {?} */
    LightboxGroupDirective.prototype.thumbnailImageElement;
    /** @type {?} */
    LightboxGroupDirective.prototype.thumbnailLightboxDirective;
    /** @type {?} */
    LightboxGroupDirective.prototype.thumbnailImageIndex;
    /** @type {?} */
    LightboxGroupDirective.prototype.thumbnailImages;
    /** @type {?} */
    LightboxGroupDirective.prototype.images;
    /** @type {?} */
    LightboxGroupDirective.prototype.properties;
    /** @type {?} */
    LightboxGroupDirective.prototype.globalEventsSubscription;
    /** @type {?} */
    LightboxGroupDirective.prototype.hostLightboxGroup;
    /** @type {?} */
    LightboxGroupDirective.prototype._lightboxDirectiveList;
    /**
     * @type {?}
     * @private
     */
    LightboxGroupDirective.prototype.eventService;
    /**
     * @type {?}
     * @private
     */
    LightboxGroupDirective.prototype.lightbox;
}
//# sourceMappingURL=data:application/json;base64,