/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { LightboxComponent } from './lightbox.component';
import { DefaultProperties } from './default-properties';
/**
 * @record
 */
export function AdComponent() { }
if (false) {
    /** @type {?} */
    AdComponent.prototype.lightboxData;
    /** @type {?} */
    AdComponent.prototype.events;
}
export class CrystalLightbox {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} appRef
     * @param {?} injector
     */
    constructor(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
    }
    /**
     * @param {?} component
     * @param {?} lightboxData
     * @return {?}
     */
    appendComponentToBody(component, lightboxData) {
        /** @type {?} */
        const componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        ((/** @type {?} */ (componentRef.instance))).lightboxData = lightboxData;
        this.appRef.attachView(componentRef.hostView);
        /** @type {?} */
        const domElem = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));
        // Add to body
        document.body.appendChild(domElem);
        ((/** @type {?} */ (componentRef.instance))).events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.type === 'close') {
                this.appRef.detachView(componentRef.hostView);
                componentRef.destroy();
            }
        }));
    }
    /**
     * @param {?} lightboxData
     * @return {?}
     */
    open(lightboxData) {
        lightboxData.properties = this.applyPropertieDefaults(DefaultProperties, lightboxData.properties);
        /** @type {?} */
        let component = this.getLightboxComponent();
        this.appendComponentToBody(component, lightboxData);
    }
    /**
     * @return {?}
     */
    getLightboxComponent() {
        return LightboxComponent;
    }
    /**
     * @param {?} defaultProperties
     * @param {?} properties
     * @return {?}
     */
    applyPropertieDefaults(defaultProperties, properties) {
        if (!properties) {
            properties = {};
        }
        if (!properties.index) {
            properties.index = 0;
        }
        this._defaultProperties = Object.assign({}, defaultProperties);
        return Object.assign(this._defaultProperties, properties);
    }
}
CrystalLightbox.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CrystalLightbox.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    CrystalLightbox.prototype.isMobile;
    /** @type {?} */
    CrystalLightbox.prototype._defaultProperties;
    /**
     * @type {?}
     * @private
     */
    CrystalLightbox.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    CrystalLightbox.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    CrystalLightbox.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlnaHRib3guc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjcnlzdGFsdWkvYW5ndWxhci1saWdodGJveC8iLCJzb3VyY2VzIjpbImxpYi9saWdodGJveC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBbUIsY0FBYyxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUM5SCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7OztBQUV6RCxpQ0FHQzs7O0lBRkEsbUNBQTJCOztJQUMzQiw2QkFBWTs7QUFJYixNQUFNLE9BQU8sZUFBZTs7Ozs7O0lBSTNCLFlBQ1Msd0JBQWtELEVBQ2xELE1BQXNCLEVBQ3RCLFFBQWtCO1FBRmxCLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUMzQixDQUFDOzs7Ozs7SUFFRCxxQkFBcUIsQ0FBQyxTQUFjLEVBQUUsWUFBMEI7O2NBQ25ELFlBQVksR0FBRyxJQUFJLENBQUMsd0JBQXdCO2FBQzdDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQzthQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUVoQyxDQUFDLG1CQUFhLFlBQVksQ0FBQyxRQUFRLEVBQUEsQ0FBQyxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFFakUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztjQUN4QyxPQUFPLEdBQUcsbUJBQUEsQ0FBQyxtQkFBQSxZQUFZLENBQUMsUUFBUSxFQUF3QixDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFlO1FBRTNGLGNBQWM7UUFDZCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QixDQUFDLG1CQUFhLFlBQVksQ0FBQyxRQUFRLEVBQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUMvRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFDO2dCQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzlDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUN2QjtRQUNJLENBQUMsRUFBQyxDQUFDO0lBQ1YsQ0FBQzs7Ozs7SUFHRCxJQUFJLENBQUMsWUFBMEI7UUFDOUIsWUFBWSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOztZQUN4RixTQUFTLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1FBQ2pELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDckQsQ0FBQzs7OztJQUVELG9CQUFvQjtRQUNuQixPQUFPLGlCQUFpQixDQUFDO0lBQzFCLENBQUM7Ozs7OztJQUVELHNCQUFzQixDQUFDLGlCQUFpQixFQUFFLFVBQVU7UUFDbkQsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNoQixVQUFVLEdBQUcsRUFBRSxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUM7WUFDckIsVUFBVSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDckI7UUFDRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUMvRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzNELENBQUM7OztZQXJERCxVQUFVOzs7O1lBVm9CLHdCQUF3QjtZQUFtQixjQUFjO1lBQW5FLFFBQVE7Ozs7SUFZNUIsbUNBQWtCOztJQUNsQiw2Q0FBK0I7Ozs7O0lBRzlCLG1EQUEwRDs7Ozs7SUFDMUQsaUNBQThCOzs7OztJQUM5QixtQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFbWJlZGRlZFZpZXdSZWYsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExpZ2h0Ym94Q29tcG9uZW50IH0gZnJvbSAnLi9saWdodGJveC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUHJvcGVydGllcywgTGlnaHRib3hEYXRhIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IERlZmF1bHRQcm9wZXJ0aWVzIH0gZnJvbSAnLi9kZWZhdWx0LXByb3BlcnRpZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFkQ29tcG9uZW50IHtcblx0bGlnaHRib3hEYXRhOiBMaWdodGJveERhdGE7IFxuXHRldmVudHM6IGFueTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENyeXN0YWxMaWdodGJveCB7XG5cdGlzTW9iaWxlOiBib29sZWFuO1xuXHRfZGVmYXVsdFByb3BlcnRpZXM6IFByb3BlcnRpZXM7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcblx0XHRwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG5cdFx0cHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpeyBcblx0fVxuIFxuXHRhcHBlbmRDb21wb25lbnRUb0JvZHkoY29tcG9uZW50OiBhbnksIGxpZ2h0Ym94RGF0YTogTGlnaHRib3hEYXRhKSB7XHRcdFxuICAgICAgICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlclxuICAgICAgICAgICAgLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudClcbiAgICAgICAgICAgIC5jcmVhdGUodGhpcy5pbmplY3Rvcik7XG5cblx0XHQoPEFkQ29tcG9uZW50PmNvbXBvbmVudFJlZi5pbnN0YW5jZSkubGlnaHRib3hEYXRhID0gbGlnaHRib3hEYXRhO1xuXG5cdFx0dGhpcy5hcHBSZWYuYXR0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuXHRcdGNvbnN0IGRvbUVsZW0gPSAoY29tcG9uZW50UmVmLmhvc3RWaWV3IGFzIEVtYmVkZGVkVmlld1JlZjxhbnk+KS5yb290Tm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQ7XG5cblx0XHQvLyBBZGQgdG8gYm9keVxuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9tRWxlbSk7XG5cdFx0XG4gICAgICAgICg8QWRDb21wb25lbnQ+Y29tcG9uZW50UmVmLmluc3RhbmNlKS5ldmVudHMuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBcdGlmIChldmVudC50eXBlID09PSAnY2xvc2UnKXtcblx0XHRcdFx0dGhpcy5hcHBSZWYuZGV0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuXHRcdFx0XHRjb21wb25lbnRSZWYuZGVzdHJveSgpO1xuXHRcdFx0fVxuICAgICAgICB9KTtcblx0fVxuXG5cblx0b3BlbihsaWdodGJveERhdGE6IExpZ2h0Ym94RGF0YSl7XG5cdFx0bGlnaHRib3hEYXRhLnByb3BlcnRpZXMgPSB0aGlzLmFwcGx5UHJvcGVydGllRGVmYXVsdHMoRGVmYXVsdFByb3BlcnRpZXMsIGxpZ2h0Ym94RGF0YS5wcm9wZXJ0aWVzKTtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IHRoaXMuZ2V0TGlnaHRib3hDb21wb25lbnQoKTtcblx0XHR0aGlzLmFwcGVuZENvbXBvbmVudFRvQm9keShjb21wb25lbnQsIGxpZ2h0Ym94RGF0YSk7XG5cdH1cblxuXHRnZXRMaWdodGJveENvbXBvbmVudCgpe1xuXHRcdHJldHVybiBMaWdodGJveENvbXBvbmVudDtcblx0fVxuXG5cdGFwcGx5UHJvcGVydGllRGVmYXVsdHMoZGVmYXVsdFByb3BlcnRpZXMsIHByb3BlcnRpZXMpe1xuXHRcdGlmICghcHJvcGVydGllcykge1xuXHRcdFx0cHJvcGVydGllcyA9IHt9O1xuXHRcdH1cblxuXHRcdGlmICghcHJvcGVydGllcy5pbmRleCl7IFxuXHRcdFx0cHJvcGVydGllcy5pbmRleCA9IDA7XG5cdFx0fVxuXHRcdHRoaXMuX2RlZmF1bHRQcm9wZXJ0aWVzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFByb3BlcnRpZXMpO1xuXHRcdHJldHVybiBPYmplY3QuYXNzaWduKHRoaXMuX2RlZmF1bHRQcm9wZXJ0aWVzLCBwcm9wZXJ0aWVzKTtcblx0fVxufSJdfQ==